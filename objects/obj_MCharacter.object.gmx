<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Character_walking</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum character{
    idle,
    walking_horizontal,
    walking_vertical,
    running_horizontal,
    running_vertical
};
state = character.idle


//abilities
spd = 5;
spd_nor_h = 2;
spd_run = 4;
moveX = 0;
spd_nor_v = 2;
moveY = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>0</libid>
        <id>0</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_get_input();
//State Controller
switch (state) {
    case character.idle:
        scr_MCharacter_idle();
        break;
    case character.walking_horizontal:
        scr_MCharacter_walking_horizontal();
        break;
    case character.walking_vertical:
        scr_MCharacter_walking_vertical();
        break;
    case character.running_vertical:
        scr_MCharacter_running_vertical();
        break;
    case character.running_horizontal:
        scr_MCharacter_running_horizontal();
        break;

}

// COLLISION CHECK
if (place_meeting(x, y + moveY, obj_border)) {
    while (!place_meeting(x, y + sign(moveY), obj_border)) {
        y += sign(moveY);
    }
    moveY = 0;
}

if (place_meeting(x + moveX , y-2, obj_border)) {
    while (!place_meeting(x + sign(moveX), y - 2, obj_border)) {
        x += sign(moveX);
    }
    moveX = 0;
}

//Sprite Controller
if (pressA + pressD !=0 and pressA != pressD) {
    image_xscale = sign(pressD - pressA);
}
//Apply movement
x += moveX;
y += moveY;

//Open Chest
chest = instance_nearest(obj_MCharacter.x, obj_MCharacter.y, obj_chest)
    x1 = chest.x
    y1 = chest.y
    
    x2 = obj_MCharacter.x
    y2 = obj_MCharacter.y
    
    distance = sqrt(sqr(x2-x1)+sqr(y2-y1));
if (distance &lt; 64) {
    instance_create(chest.x,chest.y,obj_OpenChestGui)
}
if (distance &gt; 64) {
    with(chest){
    instance_destroy()
}
}
if (pressF) == 1 {
    if (distance &lt; 64) {
        with(chest){
            sprite_index = spr_openedchest;
        }
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(20, 20, string(moveX));
draw_text(20, 40, string(moveY));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
